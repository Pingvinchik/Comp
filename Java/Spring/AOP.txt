Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-04-20T19:41:12+04:00

====== AOP ======
Created Четверг 20 Апрель 2017

Advice - работа, которую должен выполнить аспект. Пишутся в обычном Java классе

Join point - место где advice может быть применен

Pointcuts - join points, в которых необходимо выполнить advice. Указывается или аннотациями или в xml

Aspect - advice и pointcuts вместе, т.е. что выполнить, когда и где

Introduction - модификация объекта путем добавления дополнительных полей и /или методов

Weaving - связывание аспектов с объектами для создания новых, «расширенных» объектов

AOP в Spring реализовано через Proxy, т.е. создает новый объект, в котором добавлена определенная логика, а методы делигируется.

Любой аспект выполняется значительное время, поэтому проще создать свой beanPostProcessor

--------------------------------------------------------------------------------

Класс помечается @Aspect, а метод @Around.

@Around принимает аргументы, которые говорят в каком случае Advice должен быть выполнен, например:

@Around("execution(* *(..)) && @annotation(Loggable)")
1. Модификатор доступа любой (первая *)
2. Имя любое (вторая *)
3. Любые аргументы (..)
4. Аннотированно @Loggable
